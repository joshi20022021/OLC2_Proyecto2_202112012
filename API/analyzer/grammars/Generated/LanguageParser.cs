//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Language.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class LanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		MAS=25, MENOS=26, MULT=27, DIV=28, MOD=29, IGUAL=30, PARENTESIS_IZQ=31, 
		PARENTESIS_DER=32, L_CORCHETE=33, R_CORCHETE=34, PUNTOYCOMA=35, MAYOR=36, 
		MENOR=37, MAYOR_IGUAL=38, MENOR_IGUAL=39, IGUALDAD=40, DIFERENTE=41, VERDADERO=42, 
		FALSO=43, NULO=44, AGREGAR=45, LONGITUD=46, INDICE=47, UNIR=48, STRCONV_ATOI=49, 
		STRCONV_PARSEFLOAT=50, REFLECT_TYPEOF=51, LIT_STRING=52, LIT_RUNE=53, 
		LIT_FLOAT=54, LIT_ENTERO=55, IDENTIFICADOR=56, ESPACIOS=57, COMENTARIO=58, 
		COMENTARIO_MULTILINEA=59, IMPRIMIR=60;
	public const int
		RULE_programa = 0, RULE_funcionMain = 1, RULE_breakStmt = 2, RULE_continueStmt = 3, 
		RULE_returnStmt = 4, RULE_bloque = 5, RULE_sentencia = 6, RULE_ifStmt = 7, 
		RULE_declaracion = 8, RULE_asignacion = 9, RULE_tipo = 10, RULE_switchStmt = 11, 
		RULE_caseBlock = 12, RULE_defaultBlock = 13, RULE_forStmt = 14, RULE_contador = 15, 
		RULE_sliceLiteral = 16, RULE_listLiteral = 17, RULE_sliceElemento = 18, 
		RULE_funcionCall = 19, RULE_parametros = 20, RULE_parametro = 21, RULE_imprimir = 22, 
		RULE_declaracionStruct = 23, RULE_asignacionAtributo = 24, RULE_atributoStruct = 25, 
		RULE_funcionStruct = 26, RULE_funcionDeclaracion = 27, RULE_expresionLiteralStruct = 28, 
		RULE_atributosInicializacion = 29, RULE_expresion = 30;
	public static readonly string[] ruleNames = {
		"programa", "funcionMain", "breakStmt", "continueStmt", "returnStmt", 
		"bloque", "sentencia", "ifStmt", "declaracion", "asignacion", "tipo", 
		"switchStmt", "caseBlock", "defaultBlock", "forStmt", "contador", "sliceLiteral", 
		"listLiteral", "sliceElemento", "funcionCall", "parametros", "parametro", 
		"imprimir", "declaracionStruct", "asignacionAtributo", "atributoStruct", 
		"funcionStruct", "funcionDeclaracion", "expresionLiteralStruct", "atributosInicializacion", 
		"expresion"
	};

	private static readonly string[] _LiteralNames = {
		null, "'func'", "'main'", "'break'", "'continue'", "'return'", "'{'", 
		"'}'", "'if'", "'else'", "'var'", "':='", "'switch'", "'case'", "':'", 
		"'default'", "'for'", "','", "'range'", "'.'", "'type'", "'struct'", "'&&'", 
		"'||'", "'!'", "'+'", "'-'", "'*'", "'/'", "'%'", "'='", "'('", "')'", 
		"'['", "']'", "';'", "'>'", "'<'", "'>='", "'<='", "'=='", "'!='", "'true'", 
		"'false'", "'nil'", "'append'", "'len'", "'slice.Index'", "'strings.Join'", 
		"'strconv.Atoi'", "'strconv.ParseFloat'", "'reflect.TypeOf'", null, null, 
		null, null, null, null, null, null, "'fmt.Println'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "MAS", "MENOS", "MULT", "DIV", "MOD", "IGUAL", "PARENTESIS_IZQ", 
		"PARENTESIS_DER", "L_CORCHETE", "R_CORCHETE", "PUNTOYCOMA", "MAYOR", "MENOR", 
		"MAYOR_IGUAL", "MENOR_IGUAL", "IGUALDAD", "DIFERENTE", "VERDADERO", "FALSO", 
		"NULO", "AGREGAR", "LONGITUD", "INDICE", "UNIR", "STRCONV_ATOI", "STRCONV_PARSEFLOAT", 
		"REFLECT_TYPEOF", "LIT_STRING", "LIT_RUNE", "LIT_FLOAT", "LIT_ENTERO", 
		"IDENTIFICADOR", "ESPACIOS", "COMENTARIO", "COMENTARIO_MULTILINEA", "IMPRIMIR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Language.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncionMainContext funcionMain() {
			return GetRuleContext<FuncionMainContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionStructContext[] declaracionStruct() {
			return GetRuleContexts<DeclaracionStructContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionStructContext declaracionStruct(int i) {
			return GetRuleContext<DeclaracionStructContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncionStructContext[] funcionStruct() {
			return GetRuleContexts<FuncionStructContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncionStructContext funcionStruct(int i) {
			return GetRuleContext<FuncionStructContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncionDeclaracionContext[] funcionDeclaracion() {
			return GetRuleContexts<FuncionDeclaracionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncionDeclaracionContext funcionDeclaracion(int i) {
			return GetRuleContext<FuncionDeclaracionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionContext[] declaracion() {
			return GetRuleContexts<DeclaracionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionContext declaracion(int i) {
			return GetRuleContext<DeclaracionContext>(i);
		}
		public ProgramaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programa; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterPrograma(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitPrograma(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrograma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramaContext programa() {
		ProgramaContext _localctx = new ProgramaContext(Context, State);
		EnterRule(_localctx, 0, RULE_programa);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 66;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						State = 62;
						declaracionStruct();
						}
						break;
					case 2:
						{
						State = 63;
						funcionStruct();
						}
						break;
					case 3:
						{
						State = 64;
						funcionDeclaracion();
						}
						break;
					case 4:
						{
						State = 65;
						declaracion();
						}
						break;
					}
					} 
				}
				State = 70;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 71;
			funcionMain();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncionMainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQ() { return GetToken(LanguageParser.PARENTESIS_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DER() { return GetToken(LanguageParser.PARENTESIS_DER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BloqueContext bloque() {
			return GetRuleContext<BloqueContext>(0);
		}
		public FuncionMainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcionMain; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterFuncionMain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitFuncionMain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncionMainContext funcionMain() {
		FuncionMainContext _localctx = new FuncionMainContext(Context, State);
		EnterRule(_localctx, 2, RULE_funcionMain);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			Match(T__0);
			State = 74;
			Match(T__1);
			State = 75;
			Match(PARENTESIS_IZQ);
			State = 76;
			Match(PARENTESIS_DER);
			State = 77;
			bloque();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStmtContext : ParserRuleContext {
		public BreakStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterBreakStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitBreakStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStmtContext breakStmt() {
		BreakStmtContext _localctx = new BreakStmtContext(Context, State);
		EnterRule(_localctx, 4, RULE_breakStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStmtContext : ParserRuleContext {
		public ContinueStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterContinueStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitContinueStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStmtContext continueStmt() {
		ContinueStmtContext _localctx = new ContinueStmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_continueStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			Match(T__4);
			State = 85;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 84;
				expresion(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BloqueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext[] sentencia() {
			return GetRuleContexts<SentenciaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext sentencia(int i) {
			return GetRuleContext<SentenciaContext>(i);
		}
		public BloqueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bloque; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterBloque(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitBloque(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBloque(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BloqueContext bloque() {
		BloqueContext _localctx = new BloqueContext(Context, State);
		EnterRule(_localctx, 10, RULE_bloque);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			Match(T__5);
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1297032305390458168L) != 0)) {
				{
				{
				State = 88;
				sentencia();
				}
				}
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 94;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SentenciaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionContext declaracion() {
			return GetRuleContext<DeclaracionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AsignacionContext asignacion() {
			return GetRuleContext<AsignacionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImprimirContext imprimir() {
			return GetRuleContext<ImprimirContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStmtContext switchStmt() {
			return GetRuleContext<SwitchStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStmtContext forStmt() {
			return GetRuleContext<ForStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStmtContext breakStmt() {
			return GetRuleContext<BreakStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStmtContext continueStmt() {
			return GetRuleContext<ContinueStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTOYCOMA() { return GetToken(LanguageParser.PUNTOYCOMA, 0); }
		public SentenciaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sentencia; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterSentencia(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitSentencia(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentencia(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SentenciaContext sentencia() {
		SentenciaContext _localctx = new SentenciaContext(Context, State);
		EnterRule(_localctx, 12, RULE_sentencia);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 96;
				declaracion();
				}
				break;
			case 2:
				{
				State = 97;
				asignacion();
				}
				break;
			case 3:
				{
				State = 98;
				imprimir();
				}
				break;
			case 4:
				{
				State = 99;
				expresion(0);
				}
				break;
			case 5:
				{
				State = 100;
				ifStmt();
				}
				break;
			case 6:
				{
				State = 101;
				switchStmt();
				}
				break;
			case 7:
				{
				State = 102;
				forStmt();
				}
				break;
			case 8:
				{
				State = 103;
				breakStmt();
				}
				break;
			case 9:
				{
				State = 104;
				continueStmt();
				}
				break;
			case 10:
				{
				State = 105;
				returnStmt();
				}
				break;
			}
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PUNTOYCOMA) {
				{
				State = 108;
				Match(PUNTOYCOMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
	 
		public IfStmtContext() { }
		public virtual void CopyFrom(IfStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfElseContext : IfStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BloqueContext[] bloque() {
			return GetRuleContexts<BloqueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BloqueContext bloque(int i) {
			return GetRuleContext<BloqueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		public IfElseContext(IfStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterIfElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitIfElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_ifStmt);
		try {
			_localctx = new IfElseContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(T__7);
			State = 112;
			expresion(0);
			State = 113;
			bloque();
			State = 118;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 114;
				Match(T__8);
				State = 115;
				ifStmt();
				}
				break;
			case 2:
				{
				State = 116;
				Match(T__8);
				State = 117;
				bloque();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaracionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL() { return GetToken(LanguageParser.IGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public DeclaracionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaracion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterDeclaracion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitDeclaracion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaracionContext declaracion() {
		DeclaracionContext _localctx = new DeclaracionContext(Context, State);
		EnterRule(_localctx, 16, RULE_declaracion);
		int _la;
		try {
			State = 132;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__9:
				EnterOuterAlt(_localctx, 1);
				{
				State = 120;
				Match(T__9);
				State = 121;
				Match(IDENTIFICADOR);
				State = 123;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 122;
					tipo();
					}
					break;
				}
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IGUAL) {
					{
					State = 125;
					Match(IGUAL);
					State = 126;
					expresion(0);
					}
				}

				}
				break;
			case IDENTIFICADOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 129;
				Match(IDENTIFICADOR);
				State = 130;
				Match(T__10);
				State = 131;
				expresion(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsignacionContext : ParserRuleContext {
		public AsignacionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asignacion; } }
	 
		public AsignacionContext() { }
		public virtual void CopyFrom(AsignacionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AsignarContext : AsignacionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL() { return GetToken(LanguageParser.IGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public AsignarContext(AsignacionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterAsignar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitAsignar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsignar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AsignarSliceContext : AsignacionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CORCHETE() { return GetToken(LanguageParser.L_CORCHETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CORCHETE() { return GetToken(LanguageParser.R_CORCHETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL() { return GetToken(LanguageParser.IGUAL, 0); }
		public AsignarSliceContext(AsignacionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterAsignarSlice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitAsignarSlice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsignarSlice(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AsignarMatrizContext : AsignacionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] L_CORCHETE() { return GetTokens(LanguageParser.L_CORCHETE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CORCHETE(int i) {
			return GetToken(LanguageParser.L_CORCHETE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] R_CORCHETE() { return GetTokens(LanguageParser.R_CORCHETE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CORCHETE(int i) {
			return GetToken(LanguageParser.R_CORCHETE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL() { return GetToken(LanguageParser.IGUAL, 0); }
		public AsignarMatrizContext(AsignacionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterAsignarMatriz(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitAsignarMatriz(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsignarMatriz(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsignacionContext asignacion() {
		AsignacionContext _localctx = new AsignacionContext(Context, State);
		EnterRule(_localctx, 18, RULE_asignacion);
		try {
			State = 154;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				_localctx = new AsignarContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 134;
				Match(IDENTIFICADOR);
				State = 135;
				Match(IGUAL);
				State = 136;
				expresion(0);
				}
				break;
			case 2:
				_localctx = new AsignarSliceContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 137;
				Match(IDENTIFICADOR);
				State = 138;
				Match(L_CORCHETE);
				State = 139;
				expresion(0);
				State = 140;
				Match(R_CORCHETE);
				State = 141;
				Match(IGUAL);
				State = 142;
				expresion(0);
				}
				break;
			case 3:
				_localctx = new AsignarMatrizContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 144;
				Match(IDENTIFICADOR);
				State = 145;
				Match(L_CORCHETE);
				State = 146;
				expresion(0);
				State = 147;
				Match(R_CORCHETE);
				State = 148;
				Match(L_CORCHETE);
				State = 149;
				expresion(0);
				State = 150;
				Match(R_CORCHETE);
				State = 151;
				Match(IGUAL);
				State = 152;
				expresion(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TipoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CORCHETE() { return GetToken(LanguageParser.L_CORCHETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CORCHETE() { return GetToken(LanguageParser.R_CORCHETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		public TipoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tipo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterTipo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitTipo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTipo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TipoContext tipo() {
		TipoContext _localctx = new TipoContext(Context, State);
		EnterRule(_localctx, 20, RULE_tipo);
		try {
			State = 160;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case L_CORCHETE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 156;
				Match(L_CORCHETE);
				State = 157;
				Match(R_CORCHETE);
				State = 158;
				tipo();
				}
				break;
			case IDENTIFICADOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 159;
				Match(IDENTIFICADOR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStmtContext : ParserRuleContext {
		public SwitchStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStmt; } }
	 
		public SwitchStmtContext() { }
		public virtual void CopyFrom(SwitchStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SwitchContext : SwitchStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext[] caseBlock() {
			return GetRuleContexts<CaseBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext caseBlock(int i) {
			return GetRuleContext<CaseBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultBlockContext defaultBlock() {
			return GetRuleContext<DefaultBlockContext>(0);
		}
		public SwitchContext(SwitchStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterSwitch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitSwitch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStmtContext switchStmt() {
		SwitchStmtContext _localctx = new SwitchStmtContext(Context, State);
		EnterRule(_localctx, 22, RULE_switchStmt);
		int _la;
		try {
			_localctx = new SwitchContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			Match(T__11);
			State = 163;
			expresion(0);
			State = 164;
			Match(T__5);
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__12) {
				{
				{
				State = 165;
				caseBlock();
				}
				}
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 171;
				defaultBlock();
				}
			}

			State = 174;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext[] sentencia() {
			return GetRuleContexts<SentenciaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext sentencia(int i) {
			return GetRuleContext<SentenciaContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStmtContext breakStmt() {
			return GetRuleContext<BreakStmtContext>(0);
		}
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterCaseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitCaseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 24, RULE_caseBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			Match(T__12);
			State = 177;
			expresion(0);
			State = 178;
			Match(T__13);
			State = 182;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 179;
					sentencia();
					}
					} 
				}
				State = 184;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 185;
				breakStmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext[] sentencia() {
			return GetRuleContexts<SentenciaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext sentencia(int i) {
			return GetRuleContext<SentenciaContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStmtContext breakStmt() {
			return GetRuleContext<BreakStmtContext>(0);
		}
		public DefaultBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterDefaultBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitDefaultBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultBlockContext defaultBlock() {
		DefaultBlockContext _localctx = new DefaultBlockContext(Context, State);
		EnterRule(_localctx, 26, RULE_defaultBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			Match(T__14);
			State = 189;
			Match(T__13);
			State = 193;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 190;
					sentencia();
					}
					} 
				}
				State = 195;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 196;
				breakStmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStmtContext : ParserRuleContext {
		public ForStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStmt; } }
	 
		public ForStmtContext() { }
		public virtual void CopyFrom(ForStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ForClasicoContext : ForStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PUNTOYCOMA() { return GetTokens(LanguageParser.PUNTOYCOMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUNTOYCOMA(int i) {
			return GetToken(LanguageParser.PUNTOYCOMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BloqueContext bloque() {
			return GetRuleContext<BloqueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionContext declaracion() {
			return GetRuleContext<DeclaracionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AsignacionContext[] asignacion() {
			return GetRuleContexts<AsignacionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AsignacionContext asignacion(int i) {
			return GetRuleContext<AsignacionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContadorContext contador() {
			return GetRuleContext<ContadorContext>(0);
		}
		public ForClasicoContext(ForStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterForClasico(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitForClasico(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForClasico(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForCondicionContext : ForStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BloqueContext bloque() {
			return GetRuleContext<BloqueContext>(0);
		}
		public ForCondicionContext(ForStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterForCondicion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitForCondicion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForCondicion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForRangeContext : ForStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFICADOR() { return GetTokens(LanguageParser.IDENTIFICADOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR(int i) {
			return GetToken(LanguageParser.IDENTIFICADOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BloqueContext bloque() {
			return GetRuleContext<BloqueContext>(0);
		}
		public ForRangeContext(ForStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterForRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitForRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStmtContext forStmt() {
		ForStmtContext _localctx = new ForStmtContext(Context, State);
		EnterRule(_localctx, 28, RULE_forStmt);
		int _la;
		try {
			State = 227;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				_localctx = new ForCondicionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 199;
				Match(T__15);
				State = 200;
				expresion(0);
				State = 201;
				bloque();
				}
				break;
			case 2:
				_localctx = new ForClasicoContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 203;
				Match(T__15);
				State = 206;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
				case 1:
					{
					State = 204;
					declaracion();
					}
					break;
				case 2:
					{
					State = 205;
					asignacion();
					}
					break;
				}
				State = 208;
				Match(PUNTOYCOMA);
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 144110800783540224L) != 0)) {
					{
					State = 209;
					expresion(0);
					}
				}

				State = 212;
				Match(PUNTOYCOMA);
				State = 215;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
				case 1:
					{
					State = 213;
					asignacion();
					}
					break;
				case 2:
					{
					State = 214;
					contador();
					}
					break;
				}
				State = 217;
				bloque();
				}
				break;
			case 3:
				_localctx = new ForRangeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 218;
				Match(T__15);
				State = 219;
				Match(IDENTIFICADOR);
				State = 220;
				Match(T__16);
				State = 221;
				Match(IDENTIFICADOR);
				State = 222;
				Match(T__10);
				State = 223;
				Match(T__17);
				State = 224;
				expresion(0);
				State = 225;
				bloque();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContadorContext : ParserRuleContext {
		public ContadorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contador; } }
	 
		public ContadorContext() { }
		public virtual void CopyFrom(ContadorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DecrementoContext : ContadorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MENOS() { return GetTokens(LanguageParser.MENOS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENOS(int i) {
			return GetToken(LanguageParser.MENOS, i);
		}
		public DecrementoContext(ContadorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterDecremento(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitDecremento(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecremento(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncrementoContext : ContadorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAS() { return GetTokens(LanguageParser.MAS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAS(int i) {
			return GetToken(LanguageParser.MAS, i);
		}
		public IncrementoContext(ContadorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterIncremento(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitIncremento(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncremento(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContadorContext contador() {
		ContadorContext _localctx = new ContadorContext(Context, State);
		EnterRule(_localctx, 30, RULE_contador);
		try {
			State = 235;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				_localctx = new IncrementoContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 229;
				Match(IDENTIFICADOR);
				State = 230;
				Match(MAS);
				State = 231;
				Match(MAS);
				}
				break;
			case 2:
				_localctx = new DecrementoContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 232;
				Match(IDENTIFICADOR);
				State = 233;
				Match(MENOS);
				State = 234;
				Match(MENOS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SliceLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CORCHETE() { return GetToken(LanguageParser.L_CORCHETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CORCHETE() { return GetToken(LanguageParser.R_CORCHETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SliceElementoContext[] sliceElemento() {
			return GetRuleContexts<SliceElementoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SliceElementoContext sliceElemento(int i) {
			return GetRuleContext<SliceElementoContext>(i);
		}
		public SliceLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sliceLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterSliceLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitSliceLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SliceLiteralContext sliceLiteral() {
		SliceLiteralContext _localctx = new SliceLiteralContext(Context, State);
		EnterRule(_localctx, 32, RULE_sliceLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			Match(L_CORCHETE);
			State = 238;
			Match(R_CORCHETE);
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==L_CORCHETE || _la==IDENTIFICADOR) {
				{
				State = 239;
				tipo();
				}
			}

			State = 242;
			Match(T__5);
			State = 251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 144110800783540288L) != 0)) {
				{
				State = 243;
				sliceElemento();
				State = 248;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__16) {
					{
					{
					State = 244;
					Match(T__16);
					State = 245;
					sliceElemento();
					}
					}
					State = 250;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 253;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public ListLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterListLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitListLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListLiteralContext listLiteral() {
		ListLiteralContext _localctx = new ListLiteralContext(Context, State);
		EnterRule(_localctx, 34, RULE_listLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			Match(T__5);
			State = 264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 144110800783540224L) != 0)) {
				{
				State = 256;
				expresion(0);
				State = 261;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__16) {
					{
					{
					State = 257;
					Match(T__16);
					State = 258;
					expresion(0);
					}
					}
					State = 263;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 266;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SliceElementoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SliceLiteralContext sliceLiteral() {
			return GetRuleContext<SliceLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListLiteralContext listLiteral() {
			return GetRuleContext<ListLiteralContext>(0);
		}
		public SliceElementoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sliceElemento; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterSliceElemento(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitSliceElemento(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceElemento(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SliceElementoContext sliceElemento() {
		SliceElementoContext _localctx = new SliceElementoContext(Context, State);
		EnterRule(_localctx, 36, RULE_sliceElemento);
		try {
			State = 271;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 268;
				expresion(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 269;
				sliceLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 270;
				listLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFICADOR() { return GetTokens(LanguageParser.IDENTIFICADOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR(int i) {
			return GetToken(LanguageParser.IDENTIFICADOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQ() { return GetToken(LanguageParser.PARENTESIS_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DER() { return GetToken(LanguageParser.PARENTESIS_DER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public FuncionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterFuncionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitFuncionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncionCallContext funcionCall() {
		FuncionCallContext _localctx = new FuncionCallContext(Context, State);
		EnterRule(_localctx, 38, RULE_funcionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 273;
				Match(IDENTIFICADOR);
				State = 274;
				Match(T__18);
				}
				break;
			}
			State = 277;
			Match(IDENTIFICADOR);
			State = 278;
			Match(PARENTESIS_IZQ);
			State = 287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 144110800783540224L) != 0)) {
				{
				State = 279;
				expresion(0);
				State = 284;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__16) {
					{
					{
					State = 280;
					Match(T__16);
					State = 281;
					expresion(0);
					}
					}
					State = 286;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 289;
			Match(PARENTESIS_DER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametrosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParametroContext[] parametro() {
			return GetRuleContexts<ParametroContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametroContext parametro(int i) {
			return GetRuleContext<ParametroContext>(i);
		}
		public ParametrosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parametros; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterParametros(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitParametros(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParametros(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametrosContext parametros() {
		ParametrosContext _localctx = new ParametrosContext(Context, State);
		EnterRule(_localctx, 40, RULE_parametros);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			parametro();
			State = 296;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__16) {
				{
				{
				State = 292;
				Match(T__16);
				State = 293;
				parametro();
				}
				}
				State = 298;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametroContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		public ParametroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parametro; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterParametro(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitParametro(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParametro(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametroContext parametro() {
		ParametroContext _localctx = new ParametroContext(Context, State);
		EnterRule(_localctx, 42, RULE_parametro);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			Match(IDENTIFICADOR);
			State = 300;
			tipo();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImprimirContext : ParserRuleContext {
		public ImprimirContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imprimir; } }
	 
		public ImprimirContext() { }
		public virtual void CopyFrom(ImprimirContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ImprimeContext : ImprimirContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPRIMIR() { return GetToken(LanguageParser.IMPRIMIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQ() { return GetToken(LanguageParser.PARENTESIS_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DER() { return GetToken(LanguageParser.PARENTESIS_DER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public ImprimeContext(ImprimirContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterImprime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitImprime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImprime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImprimirContext imprimir() {
		ImprimirContext _localctx = new ImprimirContext(Context, State);
		EnterRule(_localctx, 44, RULE_imprimir);
		int _la;
		try {
			_localctx = new ImprimeContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			Match(IMPRIMIR);
			State = 303;
			Match(PARENTESIS_IZQ);
			State = 312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 144110800783540224L) != 0)) {
				{
				State = 304;
				expresion(0);
				State = 309;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__16) {
					{
					{
					State = 305;
					Match(T__16);
					State = 306;
					expresion(0);
					}
					}
					State = 311;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 314;
			Match(PARENTESIS_DER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaracionStructContext : ParserRuleContext {
		public DeclaracionStructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaracionStruct; } }
	 
		public DeclaracionStructContext() { }
		public virtual void CopyFrom(DeclaracionStructContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StructDeclaracionContext : DeclaracionStructContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtributoStructContext[] atributoStruct() {
			return GetRuleContexts<AtributoStructContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtributoStructContext atributoStruct(int i) {
			return GetRuleContext<AtributoStructContext>(i);
		}
		public StructDeclaracionContext(DeclaracionStructContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterStructDeclaracion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitStructDeclaracion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclaracion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaracionStructContext declaracionStruct() {
		DeclaracionStructContext _localctx = new DeclaracionStructContext(Context, State);
		EnterRule(_localctx, 46, RULE_declaracionStruct);
		int _la;
		try {
			_localctx = new StructDeclaracionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			Match(T__19);
			State = 317;
			Match(IDENTIFICADOR);
			State = 318;
			Match(T__20);
			State = 319;
			Match(T__5);
			State = 323;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFICADOR) {
				{
				{
				State = 320;
				atributoStruct();
				}
				}
				State = 325;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 326;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsignacionAtributoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL() { return GetToken(LanguageParser.IGUAL, 0); }
		public AsignacionAtributoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asignacionAtributo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterAsignacionAtributo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitAsignacionAtributo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsignacionAtributo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsignacionAtributoContext asignacionAtributo() {
		AsignacionAtributoContext _localctx = new AsignacionAtributoContext(Context, State);
		EnterRule(_localctx, 48, RULE_asignacionAtributo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			expresion(0);
			State = 329;
			Match(T__18);
			State = 330;
			Match(IDENTIFICADOR);
			State = 331;
			Match(IGUAL);
			State = 332;
			expresion(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtributoStructContext : ParserRuleContext {
		public AtributoStructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atributoStruct; } }
	 
		public AtributoStructContext() { }
		public virtual void CopyFrom(AtributoStructContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AtributoContext : AtributoStructContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		public AtributoContext(AtributoStructContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterAtributo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitAtributo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtributo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtributoStructContext atributoStruct() {
		AtributoStructContext _localctx = new AtributoStructContext(Context, State);
		EnterRule(_localctx, 50, RULE_atributoStruct);
		try {
			_localctx = new AtributoContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			Match(IDENTIFICADOR);
			State = 335;
			tipo();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncionStructContext : ParserRuleContext {
		public FuncionStructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcionStruct; } }
	 
		public FuncionStructContext() { }
		public virtual void CopyFrom(FuncionStructContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MetodoStructContext : FuncionStructContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PARENTESIS_IZQ() { return GetTokens(LanguageParser.PARENTESIS_IZQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQ(int i) {
			return GetToken(LanguageParser.PARENTESIS_IZQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFICADOR() { return GetTokens(LanguageParser.IDENTIFICADOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR(int i) {
			return GetToken(LanguageParser.IDENTIFICADOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PARENTESIS_DER() { return GetTokens(LanguageParser.PARENTESIS_DER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DER(int i) {
			return GetToken(LanguageParser.PARENTESIS_DER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BloqueContext bloque() {
			return GetRuleContext<BloqueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametrosContext parametros() {
			return GetRuleContext<ParametrosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		public MetodoStructContext(FuncionStructContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterMetodoStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitMetodoStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetodoStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncionStructContext funcionStruct() {
		FuncionStructContext _localctx = new FuncionStructContext(Context, State);
		EnterRule(_localctx, 52, RULE_funcionStruct);
		int _la;
		try {
			_localctx = new MetodoStructContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 337;
			Match(T__0);
			State = 338;
			Match(PARENTESIS_IZQ);
			State = 339;
			Match(IDENTIFICADOR);
			State = 340;
			Match(IDENTIFICADOR);
			State = 341;
			Match(PARENTESIS_DER);
			State = 342;
			Match(IDENTIFICADOR);
			State = 343;
			Match(PARENTESIS_IZQ);
			State = 345;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFICADOR) {
				{
				State = 344;
				parametros();
				}
			}

			State = 347;
			Match(PARENTESIS_DER);
			State = 349;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==L_CORCHETE || _la==IDENTIFICADOR) {
				{
				State = 348;
				tipo();
				}
			}

			State = 351;
			bloque();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncionDeclaracionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQ() { return GetToken(LanguageParser.PARENTESIS_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DER() { return GetToken(LanguageParser.PARENTESIS_DER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BloqueContext bloque() {
			return GetRuleContext<BloqueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametrosContext parametros() {
			return GetRuleContext<ParametrosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		public FuncionDeclaracionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcionDeclaracion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterFuncionDeclaracion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitFuncionDeclaracion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionDeclaracion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncionDeclaracionContext funcionDeclaracion() {
		FuncionDeclaracionContext _localctx = new FuncionDeclaracionContext(Context, State);
		EnterRule(_localctx, 54, RULE_funcionDeclaracion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353;
			Match(T__0);
			State = 354;
			Match(IDENTIFICADOR);
			State = 355;
			Match(PARENTESIS_IZQ);
			State = 357;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFICADOR) {
				{
				State = 356;
				parametros();
				}
			}

			State = 359;
			Match(PARENTESIS_DER);
			State = 361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==L_CORCHETE || _la==IDENTIFICADOR) {
				{
				State = 360;
				tipo();
				}
			}

			State = 363;
			bloque();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpresionLiteralStructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtributosInicializacionContext atributosInicializacion() {
			return GetRuleContext<AtributosInicializacionContext>(0);
		}
		public ExpresionLiteralStructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expresionLiteralStruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterExpresionLiteralStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitExpresionLiteralStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpresionLiteralStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpresionLiteralStructContext expresionLiteralStruct() {
		ExpresionLiteralStructContext _localctx = new ExpresionLiteralStructContext(Context, State);
		EnterRule(_localctx, 56, RULE_expresionLiteralStruct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 365;
			Match(IDENTIFICADOR);
			State = 366;
			Match(T__5);
			State = 368;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFICADOR) {
				{
				State = 367;
				atributosInicializacion();
				}
			}

			State = 370;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtributosInicializacionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFICADOR() { return GetTokens(LanguageParser.IDENTIFICADOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR(int i) {
			return GetToken(LanguageParser.IDENTIFICADOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public AtributosInicializacionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atributosInicializacion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterAtributosInicializacion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitAtributosInicializacion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtributosInicializacion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtributosInicializacionContext atributosInicializacion() {
		AtributosInicializacionContext _localctx = new AtributosInicializacionContext(Context, State);
		EnterRule(_localctx, 58, RULE_atributosInicializacion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			Match(IDENTIFICADOR);
			State = 373;
			Match(T__13);
			State = 374;
			expresion(0);
			State = 381;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__16) {
				{
				{
				State = 375;
				Match(T__16);
				State = 376;
				Match(IDENTIFICADOR);
				State = 377;
				Match(T__13);
				State = 378;
				expresion(0);
				}
				}
				State = 383;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpresionContext : ParserRuleContext {
		public ExpresionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expresion; } }
	 
		public ExpresionContext() { }
		public virtual void CopyFrom(ExpresionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncionParseFloatContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRCONV_PARSEFLOAT() { return GetToken(LanguageParser.STRCONV_PARSEFLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQ() { return GetToken(LanguageParser.PARENTESIS_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DER() { return GetToken(LanguageParser.PARENTESIS_DER, 0); }
		public FuncionParseFloatContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterFuncionParseFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitFuncionParseFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionParseFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparacionIgualContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUALDAD() { return GetToken(LanguageParser.IGUALDAD, 0); }
		public ComparacionIgualContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterComparacionIgual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitComparacionIgual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparacionIgual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public OrContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncionAppendContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGREGAR() { return GetToken(LanguageParser.AGREGAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQ() { return GetToken(LanguageParser.PARENTESIS_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DER() { return GetToken(LanguageParser.PARENTESIS_DER, 0); }
		public FuncionAppendContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterFuncionAppend(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitFuncionAppend(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionAppend(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncionAtoiContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRCONV_ATOI() { return GetToken(LanguageParser.STRCONV_ATOI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQ() { return GetToken(LanguageParser.PARENTESIS_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DER() { return GetToken(LanguageParser.PARENTESIS_DER, 0); }
		public FuncionAtoiContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterFuncionAtoi(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitFuncionAtoi(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionAtoi(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralEnteroContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIT_ENTERO() { return GetToken(LanguageParser.LIT_ENTERO, 0); }
		public LiteralEnteroContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterLiteralEntero(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitLiteralEntero(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralEntero(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicacionContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(LanguageParser.MULT, 0); }
		public MultiplicacionContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterMultiplicacion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitMultiplicacion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicacion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralVerdaderoContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERDADERO() { return GetToken(LanguageParser.VERDADERO, 0); }
		public LiteralVerdaderoContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterLiteralVerdadero(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitLiteralVerdadero(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralVerdadero(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AccesoSliceContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CORCHETE() { return GetToken(LanguageParser.L_CORCHETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CORCHETE() { return GetToken(LanguageParser.R_CORCHETE, 0); }
		public AccesoSliceContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterAccesoSlice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitAccesoSlice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccesoSlice(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MenorOIgualContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENOR_IGUAL() { return GetToken(LanguageParser.MENOR_IGUAL, 0); }
		public MenorOIgualContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterMenorOIgual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitMenorOIgual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenorOIgual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivisionContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(LanguageParser.DIV, 0); }
		public DivisionContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterDivision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitDivision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivision(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RestaContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENOS() { return GetToken(LanguageParser.MENOS, 0); }
		public RestaContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterResta(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitResta(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResta(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparacionDiferenteContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIFERENTE() { return GetToken(LanguageParser.DIFERENTE, 0); }
		public ComparacionDiferenteContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterComparacionDiferente(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitComparacionDiferente(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparacionDiferente(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralCadenaContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIT_STRING() { return GetToken(LanguageParser.LIT_STRING, 0); }
		public LiteralCadenaContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterLiteralCadena(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitLiteralCadena(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralCadena(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParentesisContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQ() { return GetToken(LanguageParser.PARENTESIS_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DER() { return GetToken(LanguageParser.PARENTESIS_DER, 0); }
		public ParentesisContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterParentesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitParentesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParentesis(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModuloContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(LanguageParser.MOD, 0); }
		public ModuloContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterModulo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitModulo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModulo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncionLlamadaContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncionCallContext funcionCall() {
			return GetRuleContext<FuncionCallContext>(0);
		}
		public FuncionLlamadaContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterFuncionLlamada(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitFuncionLlamada(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionLlamada(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralRuneContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIT_RUNE() { return GetToken(LanguageParser.LIT_RUNE, 0); }
		public LiteralRuneContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterLiteralRune(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitLiteralRune(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralRune(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AccesoSlice2DContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] L_CORCHETE() { return GetTokens(LanguageParser.L_CORCHETE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CORCHETE(int i) {
			return GetToken(LanguageParser.L_CORCHETE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] R_CORCHETE() { return GetTokens(LanguageParser.R_CORCHETE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CORCHETE(int i) {
			return GetToken(LanguageParser.R_CORCHETE, i);
		}
		public AccesoSlice2DContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterAccesoSlice2D(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitAccesoSlice2D(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccesoSlice2D(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncionTypeOfContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFLECT_TYPEOF() { return GetToken(LanguageParser.REFLECT_TYPEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQ() { return GetToken(LanguageParser.PARENTESIS_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DER() { return GetToken(LanguageParser.PARENTESIS_DER, 0); }
		public FuncionTypeOfContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterFuncionTypeOf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitFuncionTypeOf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionTypeOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralFlotanteContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIT_FLOAT() { return GetToken(LanguageParser.LIT_FLOAT, 0); }
		public LiteralFlotanteContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterLiteralFlotante(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitLiteralFlotante(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralFlotante(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncionJoinContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIR() { return GetToken(LanguageParser.UNIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQ() { return GetToken(LanguageParser.PARENTESIS_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DER() { return GetToken(LanguageParser.PARENTESIS_DER, 0); }
		public FuncionJoinContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterFuncionJoin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitFuncionJoin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionJoin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SumaContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAS() { return GetToken(LanguageParser.MAS, 0); }
		public SumaContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterSuma(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitSuma(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuma(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public NotContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpresionAccesoAtributoContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		public ExpresionAccesoAtributoContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterExpresionAccesoAtributo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitExpresionAccesoAtributo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpresionAccesoAtributo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncionLenContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONGITUD() { return GetToken(LanguageParser.LONGITUD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQ() { return GetToken(LanguageParser.PARENTESIS_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DER() { return GetToken(LanguageParser.PARENTESIS_DER, 0); }
		public FuncionLenContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterFuncionLen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitFuncionLen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionLen(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpresionStructLiteralContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionLiteralStructContext expresionLiteralStruct() {
			return GetRuleContext<ExpresionLiteralStructContext>(0);
		}
		public ExpresionStructLiteralContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterExpresionStructLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitExpresionStructLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpresionStructLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncionIndexContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDICE() { return GetToken(LanguageParser.INDICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQ() { return GetToken(LanguageParser.PARENTESIS_IZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DER() { return GetToken(LanguageParser.PARENTESIS_DER, 0); }
		public FuncionIndexContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterFuncionIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitFuncionIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SliceContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SliceLiteralContext sliceLiteral() {
			return GetRuleContext<SliceLiteralContext>(0);
		}
		public SliceContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterSlice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitSlice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlice(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public AndContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralNuloContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULO() { return GetToken(LanguageParser.NULO, 0); }
		public LiteralNuloContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterLiteralNulo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitLiteralNulo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralNulo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MayorOIgualContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAYOR_IGUAL() { return GetToken(LanguageParser.MAYOR_IGUAL, 0); }
		public MayorOIgualContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterMayorOIgual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitMayorOIgual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMayorOIgual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralFalsoContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSO() { return GetToken(LanguageParser.FALSO, 0); }
		public LiteralFalsoContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterLiteralFalso(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitLiteralFalso(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralFalso(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MayorQueContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAYOR() { return GetToken(LanguageParser.MAYOR, 0); }
		public MayorQueContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterMayorQue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitMayorQue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMayorQue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentificadorContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFICADOR() { return GetToken(LanguageParser.IDENTIFICADOR, 0); }
		public IdentificadorContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterIdentificador(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitIdentificador(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentificador(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MenorQueContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENOR() { return GetToken(LanguageParser.MENOR, 0); }
		public MenorQueContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterMenorQue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitMenorQue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenorQue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpresionContext expresion() {
		return expresion(0);
	}

	private ExpresionContext expresion(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpresionContext _localctx = new ExpresionContext(Context, _parentState);
		ExpresionContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_expresion, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 456;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				{
				_localctx = new NotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 385;
				Match(T__23);
				State = 386;
				expresion(23);
				}
				break;
			case 2:
				{
				_localctx = new ParentesisContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 387;
				Match(PARENTESIS_IZQ);
				State = 388;
				expresion(0);
				State = 389;
				Match(PARENTESIS_DER);
				}
				break;
			case 3:
				{
				_localctx = new SliceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 391;
				sliceLiteral();
				}
				break;
			case 4:
				{
				_localctx = new AccesoSliceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 392;
				Match(IDENTIFICADOR);
				State = 393;
				Match(L_CORCHETE);
				State = 394;
				expresion(0);
				State = 395;
				Match(R_CORCHETE);
				}
				break;
			case 5:
				{
				_localctx = new FuncionAppendContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 397;
				Match(AGREGAR);
				State = 398;
				Match(PARENTESIS_IZQ);
				State = 399;
				expresion(0);
				State = 400;
				Match(T__16);
				State = 401;
				expresion(0);
				State = 402;
				Match(PARENTESIS_DER);
				}
				break;
			case 6:
				{
				_localctx = new FuncionLenContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 404;
				Match(LONGITUD);
				State = 405;
				Match(PARENTESIS_IZQ);
				State = 406;
				expresion(0);
				State = 407;
				Match(PARENTESIS_DER);
				}
				break;
			case 7:
				{
				_localctx = new FuncionIndexContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 409;
				Match(INDICE);
				State = 410;
				Match(PARENTESIS_IZQ);
				State = 411;
				expresion(0);
				State = 412;
				Match(T__16);
				State = 413;
				expresion(0);
				State = 414;
				Match(PARENTESIS_DER);
				}
				break;
			case 8:
				{
				_localctx = new FuncionJoinContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 416;
				Match(UNIR);
				State = 417;
				Match(PARENTESIS_IZQ);
				State = 418;
				expresion(0);
				State = 419;
				Match(T__16);
				State = 420;
				expresion(0);
				State = 421;
				Match(PARENTESIS_DER);
				}
				break;
			case 9:
				{
				_localctx = new AccesoSlice2DContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 423;
				Match(IDENTIFICADOR);
				State = 424;
				Match(L_CORCHETE);
				State = 425;
				expresion(0);
				State = 426;
				Match(R_CORCHETE);
				State = 427;
				Match(L_CORCHETE);
				State = 428;
				expresion(0);
				State = 429;
				Match(R_CORCHETE);
				}
				break;
			case 10:
				{
				_localctx = new FuncionLlamadaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 431;
				funcionCall();
				}
				break;
			case 11:
				{
				_localctx = new ExpresionStructLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 432;
				expresionLiteralStruct();
				}
				break;
			case 12:
				{
				_localctx = new FuncionAtoiContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 433;
				Match(STRCONV_ATOI);
				State = 434;
				Match(PARENTESIS_IZQ);
				State = 435;
				expresion(0);
				State = 436;
				Match(PARENTESIS_DER);
				}
				break;
			case 13:
				{
				_localctx = new FuncionParseFloatContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 438;
				Match(STRCONV_PARSEFLOAT);
				State = 439;
				Match(PARENTESIS_IZQ);
				State = 440;
				expresion(0);
				State = 441;
				Match(PARENTESIS_DER);
				}
				break;
			case 14:
				{
				_localctx = new FuncionTypeOfContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 443;
				Match(REFLECT_TYPEOF);
				State = 444;
				Match(PARENTESIS_IZQ);
				State = 445;
				expresion(0);
				State = 446;
				Match(PARENTESIS_DER);
				}
				break;
			case 15:
				{
				_localctx = new LiteralEnteroContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 448;
				Match(LIT_ENTERO);
				}
				break;
			case 16:
				{
				_localctx = new LiteralFlotanteContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 449;
				Match(LIT_FLOAT);
				}
				break;
			case 17:
				{
				_localctx = new LiteralRuneContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 450;
				Match(LIT_RUNE);
				}
				break;
			case 18:
				{
				_localctx = new LiteralCadenaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 451;
				Match(LIT_STRING);
				}
				break;
			case 19:
				{
				_localctx = new LiteralVerdaderoContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 452;
				Match(VERDADERO);
				}
				break;
			case 20:
				{
				_localctx = new LiteralFalsoContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 453;
				Match(FALSO);
				}
				break;
			case 21:
				{
				_localctx = new LiteralNuloContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 454;
				Match(NULO);
				}
				break;
			case 22:
				{
				_localctx = new IdentificadorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 455;
				Match(IDENTIFICADOR);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 502;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 500;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
					case 1:
						{
						_localctx = new SumaContext(new ExpresionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 458;
						if (!(Precpred(Context, 36))) throw new FailedPredicateException(this, "Precpred(Context, 36)");
						State = 459;
						Match(MAS);
						State = 460;
						expresion(37);
						}
						break;
					case 2:
						{
						_localctx = new RestaContext(new ExpresionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 461;
						if (!(Precpred(Context, 35))) throw new FailedPredicateException(this, "Precpred(Context, 35)");
						State = 462;
						Match(MENOS);
						State = 463;
						expresion(36);
						}
						break;
					case 3:
						{
						_localctx = new MultiplicacionContext(new ExpresionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 464;
						if (!(Precpred(Context, 34))) throw new FailedPredicateException(this, "Precpred(Context, 34)");
						State = 465;
						Match(MULT);
						State = 466;
						expresion(35);
						}
						break;
					case 4:
						{
						_localctx = new DivisionContext(new ExpresionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 467;
						if (!(Precpred(Context, 33))) throw new FailedPredicateException(this, "Precpred(Context, 33)");
						State = 468;
						Match(DIV);
						State = 469;
						expresion(34);
						}
						break;
					case 5:
						{
						_localctx = new ModuloContext(new ExpresionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 470;
						if (!(Precpred(Context, 32))) throw new FailedPredicateException(this, "Precpred(Context, 32)");
						State = 471;
						Match(MOD);
						State = 472;
						expresion(33);
						}
						break;
					case 6:
						{
						_localctx = new ComparacionIgualContext(new ExpresionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 473;
						if (!(Precpred(Context, 31))) throw new FailedPredicateException(this, "Precpred(Context, 31)");
						State = 474;
						Match(IGUALDAD);
						State = 475;
						expresion(32);
						}
						break;
					case 7:
						{
						_localctx = new ComparacionDiferenteContext(new ExpresionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 476;
						if (!(Precpred(Context, 30))) throw new FailedPredicateException(this, "Precpred(Context, 30)");
						State = 477;
						Match(DIFERENTE);
						State = 478;
						expresion(31);
						}
						break;
					case 8:
						{
						_localctx = new MayorQueContext(new ExpresionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 479;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 480;
						Match(MAYOR);
						State = 481;
						expresion(30);
						}
						break;
					case 9:
						{
						_localctx = new MenorQueContext(new ExpresionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 482;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 483;
						Match(MENOR);
						State = 484;
						expresion(29);
						}
						break;
					case 10:
						{
						_localctx = new MayorOIgualContext(new ExpresionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 485;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 486;
						Match(MAYOR_IGUAL);
						State = 487;
						expresion(28);
						}
						break;
					case 11:
						{
						_localctx = new MenorOIgualContext(new ExpresionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 488;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 489;
						Match(MENOR_IGUAL);
						State = 490;
						expresion(27);
						}
						break;
					case 12:
						{
						_localctx = new AndContext(new ExpresionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 491;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 492;
						Match(T__21);
						State = 493;
						expresion(26);
						}
						break;
					case 13:
						{
						_localctx = new OrContext(new ExpresionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 494;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 495;
						Match(T__22);
						State = 496;
						expresion(25);
						}
						break;
					case 14:
						{
						_localctx = new ExpresionAccesoAtributoContext(new ExpresionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 497;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 498;
						Match(T__18);
						State = 499;
						Match(IDENTIFICADOR);
						}
						break;
					}
					} 
				}
				State = 504;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 30: return expresion_sempred((ExpresionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expresion_sempred(ExpresionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 36);
		case 1: return Precpred(Context, 35);
		case 2: return Precpred(Context, 34);
		case 3: return Precpred(Context, 33);
		case 4: return Precpred(Context, 32);
		case 5: return Precpred(Context, 31);
		case 6: return Precpred(Context, 30);
		case 7: return Precpred(Context, 29);
		case 8: return Precpred(Context, 28);
		case 9: return Precpred(Context, 27);
		case 10: return Precpred(Context, 26);
		case 11: return Precpred(Context, 25);
		case 12: return Precpred(Context, 24);
		case 13: return Precpred(Context, 12);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,60,506,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,1,0,1,0,1,0,1,0,5,0,67,8,0,10,0,12,0,70,9,0,1,0,1,
		0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,3,4,86,8,4,1,5,1,5,5,
		5,90,8,5,10,5,12,5,93,9,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,3,6,107,8,6,1,6,3,6,110,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,119,8,
		7,1,8,1,8,1,8,3,8,124,8,8,1,8,1,8,3,8,128,8,8,1,8,1,8,1,8,3,8,133,8,8,
		1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
		9,1,9,1,9,3,9,155,8,9,1,10,1,10,1,10,1,10,3,10,161,8,10,1,11,1,11,1,11,
		1,11,5,11,167,8,11,10,11,12,11,170,9,11,1,11,3,11,173,8,11,1,11,1,11,1,
		12,1,12,1,12,1,12,5,12,181,8,12,10,12,12,12,184,9,12,1,12,3,12,187,8,12,
		1,13,1,13,1,13,5,13,192,8,13,10,13,12,13,195,9,13,1,13,3,13,198,8,13,1,
		14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,207,8,14,1,14,1,14,3,14,211,8,14,
		1,14,1,14,1,14,3,14,216,8,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,3,14,228,8,14,1,15,1,15,1,15,1,15,1,15,1,15,3,15,236,8,15,1,16,
		1,16,1,16,3,16,241,8,16,1,16,1,16,1,16,1,16,5,16,247,8,16,10,16,12,16,
		250,9,16,3,16,252,8,16,1,16,1,16,1,17,1,17,1,17,1,17,5,17,260,8,17,10,
		17,12,17,263,9,17,3,17,265,8,17,1,17,1,17,1,18,1,18,1,18,3,18,272,8,18,
		1,19,1,19,3,19,276,8,19,1,19,1,19,1,19,1,19,1,19,5,19,283,8,19,10,19,12,
		19,286,9,19,3,19,288,8,19,1,19,1,19,1,20,1,20,1,20,5,20,295,8,20,10,20,
		12,20,298,9,20,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,5,22,308,8,22,10,
		22,12,22,311,9,22,3,22,313,8,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,5,23,
		322,8,23,10,23,12,23,325,9,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,
		1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,346,8,26,1,
		26,1,26,3,26,350,8,26,1,26,1,26,1,27,1,27,1,27,1,27,3,27,358,8,27,1,27,
		1,27,3,27,362,8,27,1,27,1,27,1,28,1,28,1,28,3,28,369,8,28,1,28,1,28,1,
		29,1,29,1,29,1,29,1,29,1,29,1,29,5,29,380,8,29,10,29,12,29,383,9,29,1,
		30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
		30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
		30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
		30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
		30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
		30,1,30,3,30,457,8,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
		1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
		1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
		1,30,1,30,1,30,1,30,5,30,501,8,30,10,30,12,30,504,9,30,1,30,0,1,60,31,
		0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
		50,52,54,56,58,60,0,0,567,0,68,1,0,0,0,2,73,1,0,0,0,4,79,1,0,0,0,6,81,
		1,0,0,0,8,83,1,0,0,0,10,87,1,0,0,0,12,106,1,0,0,0,14,111,1,0,0,0,16,132,
		1,0,0,0,18,154,1,0,0,0,20,160,1,0,0,0,22,162,1,0,0,0,24,176,1,0,0,0,26,
		188,1,0,0,0,28,227,1,0,0,0,30,235,1,0,0,0,32,237,1,0,0,0,34,255,1,0,0,
		0,36,271,1,0,0,0,38,275,1,0,0,0,40,291,1,0,0,0,42,299,1,0,0,0,44,302,1,
		0,0,0,46,316,1,0,0,0,48,328,1,0,0,0,50,334,1,0,0,0,52,337,1,0,0,0,54,353,
		1,0,0,0,56,365,1,0,0,0,58,372,1,0,0,0,60,456,1,0,0,0,62,67,3,46,23,0,63,
		67,3,52,26,0,64,67,3,54,27,0,65,67,3,16,8,0,66,62,1,0,0,0,66,63,1,0,0,
		0,66,64,1,0,0,0,66,65,1,0,0,0,67,70,1,0,0,0,68,66,1,0,0,0,68,69,1,0,0,
		0,69,71,1,0,0,0,70,68,1,0,0,0,71,72,3,2,1,0,72,1,1,0,0,0,73,74,5,1,0,0,
		74,75,5,2,0,0,75,76,5,31,0,0,76,77,5,32,0,0,77,78,3,10,5,0,78,3,1,0,0,
		0,79,80,5,3,0,0,80,5,1,0,0,0,81,82,5,4,0,0,82,7,1,0,0,0,83,85,5,5,0,0,
		84,86,3,60,30,0,85,84,1,0,0,0,85,86,1,0,0,0,86,9,1,0,0,0,87,91,5,6,0,0,
		88,90,3,12,6,0,89,88,1,0,0,0,90,93,1,0,0,0,91,89,1,0,0,0,91,92,1,0,0,0,
		92,94,1,0,0,0,93,91,1,0,0,0,94,95,5,7,0,0,95,11,1,0,0,0,96,107,3,16,8,
		0,97,107,3,18,9,0,98,107,3,44,22,0,99,107,3,60,30,0,100,107,3,14,7,0,101,
		107,3,22,11,0,102,107,3,28,14,0,103,107,3,4,2,0,104,107,3,6,3,0,105,107,
		3,8,4,0,106,96,1,0,0,0,106,97,1,0,0,0,106,98,1,0,0,0,106,99,1,0,0,0,106,
		100,1,0,0,0,106,101,1,0,0,0,106,102,1,0,0,0,106,103,1,0,0,0,106,104,1,
		0,0,0,106,105,1,0,0,0,107,109,1,0,0,0,108,110,5,35,0,0,109,108,1,0,0,0,
		109,110,1,0,0,0,110,13,1,0,0,0,111,112,5,8,0,0,112,113,3,60,30,0,113,118,
		3,10,5,0,114,115,5,9,0,0,115,119,3,14,7,0,116,117,5,9,0,0,117,119,3,10,
		5,0,118,114,1,0,0,0,118,116,1,0,0,0,118,119,1,0,0,0,119,15,1,0,0,0,120,
		121,5,10,0,0,121,123,5,56,0,0,122,124,3,20,10,0,123,122,1,0,0,0,123,124,
		1,0,0,0,124,127,1,0,0,0,125,126,5,30,0,0,126,128,3,60,30,0,127,125,1,0,
		0,0,127,128,1,0,0,0,128,133,1,0,0,0,129,130,5,56,0,0,130,131,5,11,0,0,
		131,133,3,60,30,0,132,120,1,0,0,0,132,129,1,0,0,0,133,17,1,0,0,0,134,135,
		5,56,0,0,135,136,5,30,0,0,136,155,3,60,30,0,137,138,5,56,0,0,138,139,5,
		33,0,0,139,140,3,60,30,0,140,141,5,34,0,0,141,142,5,30,0,0,142,143,3,60,
		30,0,143,155,1,0,0,0,144,145,5,56,0,0,145,146,5,33,0,0,146,147,3,60,30,
		0,147,148,5,34,0,0,148,149,5,33,0,0,149,150,3,60,30,0,150,151,5,34,0,0,
		151,152,5,30,0,0,152,153,3,60,30,0,153,155,1,0,0,0,154,134,1,0,0,0,154,
		137,1,0,0,0,154,144,1,0,0,0,155,19,1,0,0,0,156,157,5,33,0,0,157,158,5,
		34,0,0,158,161,3,20,10,0,159,161,5,56,0,0,160,156,1,0,0,0,160,159,1,0,
		0,0,161,21,1,0,0,0,162,163,5,12,0,0,163,164,3,60,30,0,164,168,5,6,0,0,
		165,167,3,24,12,0,166,165,1,0,0,0,167,170,1,0,0,0,168,166,1,0,0,0,168,
		169,1,0,0,0,169,172,1,0,0,0,170,168,1,0,0,0,171,173,3,26,13,0,172,171,
		1,0,0,0,172,173,1,0,0,0,173,174,1,0,0,0,174,175,5,7,0,0,175,23,1,0,0,0,
		176,177,5,13,0,0,177,178,3,60,30,0,178,182,5,14,0,0,179,181,3,12,6,0,180,
		179,1,0,0,0,181,184,1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,186,1,
		0,0,0,184,182,1,0,0,0,185,187,3,4,2,0,186,185,1,0,0,0,186,187,1,0,0,0,
		187,25,1,0,0,0,188,189,5,15,0,0,189,193,5,14,0,0,190,192,3,12,6,0,191,
		190,1,0,0,0,192,195,1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,197,1,
		0,0,0,195,193,1,0,0,0,196,198,3,4,2,0,197,196,1,0,0,0,197,198,1,0,0,0,
		198,27,1,0,0,0,199,200,5,16,0,0,200,201,3,60,30,0,201,202,3,10,5,0,202,
		228,1,0,0,0,203,206,5,16,0,0,204,207,3,16,8,0,205,207,3,18,9,0,206,204,
		1,0,0,0,206,205,1,0,0,0,206,207,1,0,0,0,207,208,1,0,0,0,208,210,5,35,0,
		0,209,211,3,60,30,0,210,209,1,0,0,0,210,211,1,0,0,0,211,212,1,0,0,0,212,
		215,5,35,0,0,213,216,3,18,9,0,214,216,3,30,15,0,215,213,1,0,0,0,215,214,
		1,0,0,0,215,216,1,0,0,0,216,217,1,0,0,0,217,228,3,10,5,0,218,219,5,16,
		0,0,219,220,5,56,0,0,220,221,5,17,0,0,221,222,5,56,0,0,222,223,5,11,0,
		0,223,224,5,18,0,0,224,225,3,60,30,0,225,226,3,10,5,0,226,228,1,0,0,0,
		227,199,1,0,0,0,227,203,1,0,0,0,227,218,1,0,0,0,228,29,1,0,0,0,229,230,
		5,56,0,0,230,231,5,25,0,0,231,236,5,25,0,0,232,233,5,56,0,0,233,234,5,
		26,0,0,234,236,5,26,0,0,235,229,1,0,0,0,235,232,1,0,0,0,236,31,1,0,0,0,
		237,238,5,33,0,0,238,240,5,34,0,0,239,241,3,20,10,0,240,239,1,0,0,0,240,
		241,1,0,0,0,241,242,1,0,0,0,242,251,5,6,0,0,243,248,3,36,18,0,244,245,
		5,17,0,0,245,247,3,36,18,0,246,244,1,0,0,0,247,250,1,0,0,0,248,246,1,0,
		0,0,248,249,1,0,0,0,249,252,1,0,0,0,250,248,1,0,0,0,251,243,1,0,0,0,251,
		252,1,0,0,0,252,253,1,0,0,0,253,254,5,7,0,0,254,33,1,0,0,0,255,264,5,6,
		0,0,256,261,3,60,30,0,257,258,5,17,0,0,258,260,3,60,30,0,259,257,1,0,0,
		0,260,263,1,0,0,0,261,259,1,0,0,0,261,262,1,0,0,0,262,265,1,0,0,0,263,
		261,1,0,0,0,264,256,1,0,0,0,264,265,1,0,0,0,265,266,1,0,0,0,266,267,5,
		7,0,0,267,35,1,0,0,0,268,272,3,60,30,0,269,272,3,32,16,0,270,272,3,34,
		17,0,271,268,1,0,0,0,271,269,1,0,0,0,271,270,1,0,0,0,272,37,1,0,0,0,273,
		274,5,56,0,0,274,276,5,19,0,0,275,273,1,0,0,0,275,276,1,0,0,0,276,277,
		1,0,0,0,277,278,5,56,0,0,278,287,5,31,0,0,279,284,3,60,30,0,280,281,5,
		17,0,0,281,283,3,60,30,0,282,280,1,0,0,0,283,286,1,0,0,0,284,282,1,0,0,
		0,284,285,1,0,0,0,285,288,1,0,0,0,286,284,1,0,0,0,287,279,1,0,0,0,287,
		288,1,0,0,0,288,289,1,0,0,0,289,290,5,32,0,0,290,39,1,0,0,0,291,296,3,
		42,21,0,292,293,5,17,0,0,293,295,3,42,21,0,294,292,1,0,0,0,295,298,1,0,
		0,0,296,294,1,0,0,0,296,297,1,0,0,0,297,41,1,0,0,0,298,296,1,0,0,0,299,
		300,5,56,0,0,300,301,3,20,10,0,301,43,1,0,0,0,302,303,5,60,0,0,303,312,
		5,31,0,0,304,309,3,60,30,0,305,306,5,17,0,0,306,308,3,60,30,0,307,305,
		1,0,0,0,308,311,1,0,0,0,309,307,1,0,0,0,309,310,1,0,0,0,310,313,1,0,0,
		0,311,309,1,0,0,0,312,304,1,0,0,0,312,313,1,0,0,0,313,314,1,0,0,0,314,
		315,5,32,0,0,315,45,1,0,0,0,316,317,5,20,0,0,317,318,5,56,0,0,318,319,
		5,21,0,0,319,323,5,6,0,0,320,322,3,50,25,0,321,320,1,0,0,0,322,325,1,0,
		0,0,323,321,1,0,0,0,323,324,1,0,0,0,324,326,1,0,0,0,325,323,1,0,0,0,326,
		327,5,7,0,0,327,47,1,0,0,0,328,329,3,60,30,0,329,330,5,19,0,0,330,331,
		5,56,0,0,331,332,5,30,0,0,332,333,3,60,30,0,333,49,1,0,0,0,334,335,5,56,
		0,0,335,336,3,20,10,0,336,51,1,0,0,0,337,338,5,1,0,0,338,339,5,31,0,0,
		339,340,5,56,0,0,340,341,5,56,0,0,341,342,5,32,0,0,342,343,5,56,0,0,343,
		345,5,31,0,0,344,346,3,40,20,0,345,344,1,0,0,0,345,346,1,0,0,0,346,347,
		1,0,0,0,347,349,5,32,0,0,348,350,3,20,10,0,349,348,1,0,0,0,349,350,1,0,
		0,0,350,351,1,0,0,0,351,352,3,10,5,0,352,53,1,0,0,0,353,354,5,1,0,0,354,
		355,5,56,0,0,355,357,5,31,0,0,356,358,3,40,20,0,357,356,1,0,0,0,357,358,
		1,0,0,0,358,359,1,0,0,0,359,361,5,32,0,0,360,362,3,20,10,0,361,360,1,0,
		0,0,361,362,1,0,0,0,362,363,1,0,0,0,363,364,3,10,5,0,364,55,1,0,0,0,365,
		366,5,56,0,0,366,368,5,6,0,0,367,369,3,58,29,0,368,367,1,0,0,0,368,369,
		1,0,0,0,369,370,1,0,0,0,370,371,5,7,0,0,371,57,1,0,0,0,372,373,5,56,0,
		0,373,374,5,14,0,0,374,381,3,60,30,0,375,376,5,17,0,0,376,377,5,56,0,0,
		377,378,5,14,0,0,378,380,3,60,30,0,379,375,1,0,0,0,380,383,1,0,0,0,381,
		379,1,0,0,0,381,382,1,0,0,0,382,59,1,0,0,0,383,381,1,0,0,0,384,385,6,30,
		-1,0,385,386,5,24,0,0,386,457,3,60,30,23,387,388,5,31,0,0,388,389,3,60,
		30,0,389,390,5,32,0,0,390,457,1,0,0,0,391,457,3,32,16,0,392,393,5,56,0,
		0,393,394,5,33,0,0,394,395,3,60,30,0,395,396,5,34,0,0,396,457,1,0,0,0,
		397,398,5,45,0,0,398,399,5,31,0,0,399,400,3,60,30,0,400,401,5,17,0,0,401,
		402,3,60,30,0,402,403,5,32,0,0,403,457,1,0,0,0,404,405,5,46,0,0,405,406,
		5,31,0,0,406,407,3,60,30,0,407,408,5,32,0,0,408,457,1,0,0,0,409,410,5,
		47,0,0,410,411,5,31,0,0,411,412,3,60,30,0,412,413,5,17,0,0,413,414,3,60,
		30,0,414,415,5,32,0,0,415,457,1,0,0,0,416,417,5,48,0,0,417,418,5,31,0,
		0,418,419,3,60,30,0,419,420,5,17,0,0,420,421,3,60,30,0,421,422,5,32,0,
		0,422,457,1,0,0,0,423,424,5,56,0,0,424,425,5,33,0,0,425,426,3,60,30,0,
		426,427,5,34,0,0,427,428,5,33,0,0,428,429,3,60,30,0,429,430,5,34,0,0,430,
		457,1,0,0,0,431,457,3,38,19,0,432,457,3,56,28,0,433,434,5,49,0,0,434,435,
		5,31,0,0,435,436,3,60,30,0,436,437,5,32,0,0,437,457,1,0,0,0,438,439,5,
		50,0,0,439,440,5,31,0,0,440,441,3,60,30,0,441,442,5,32,0,0,442,457,1,0,
		0,0,443,444,5,51,0,0,444,445,5,31,0,0,445,446,3,60,30,0,446,447,5,32,0,
		0,447,457,1,0,0,0,448,457,5,55,0,0,449,457,5,54,0,0,450,457,5,53,0,0,451,
		457,5,52,0,0,452,457,5,42,0,0,453,457,5,43,0,0,454,457,5,44,0,0,455,457,
		5,56,0,0,456,384,1,0,0,0,456,387,1,0,0,0,456,391,1,0,0,0,456,392,1,0,0,
		0,456,397,1,0,0,0,456,404,1,0,0,0,456,409,1,0,0,0,456,416,1,0,0,0,456,
		423,1,0,0,0,456,431,1,0,0,0,456,432,1,0,0,0,456,433,1,0,0,0,456,438,1,
		0,0,0,456,443,1,0,0,0,456,448,1,0,0,0,456,449,1,0,0,0,456,450,1,0,0,0,
		456,451,1,0,0,0,456,452,1,0,0,0,456,453,1,0,0,0,456,454,1,0,0,0,456,455,
		1,0,0,0,457,502,1,0,0,0,458,459,10,36,0,0,459,460,5,25,0,0,460,501,3,60,
		30,37,461,462,10,35,0,0,462,463,5,26,0,0,463,501,3,60,30,36,464,465,10,
		34,0,0,465,466,5,27,0,0,466,501,3,60,30,35,467,468,10,33,0,0,468,469,5,
		28,0,0,469,501,3,60,30,34,470,471,10,32,0,0,471,472,5,29,0,0,472,501,3,
		60,30,33,473,474,10,31,0,0,474,475,5,40,0,0,475,501,3,60,30,32,476,477,
		10,30,0,0,477,478,5,41,0,0,478,501,3,60,30,31,479,480,10,29,0,0,480,481,
		5,36,0,0,481,501,3,60,30,30,482,483,10,28,0,0,483,484,5,37,0,0,484,501,
		3,60,30,29,485,486,10,27,0,0,486,487,5,38,0,0,487,501,3,60,30,28,488,489,
		10,26,0,0,489,490,5,39,0,0,490,501,3,60,30,27,491,492,10,25,0,0,492,493,
		5,22,0,0,493,501,3,60,30,26,494,495,10,24,0,0,495,496,5,23,0,0,496,501,
		3,60,30,25,497,498,10,12,0,0,498,499,5,19,0,0,499,501,5,56,0,0,500,458,
		1,0,0,0,500,461,1,0,0,0,500,464,1,0,0,0,500,467,1,0,0,0,500,470,1,0,0,
		0,500,473,1,0,0,0,500,476,1,0,0,0,500,479,1,0,0,0,500,482,1,0,0,0,500,
		485,1,0,0,0,500,488,1,0,0,0,500,491,1,0,0,0,500,494,1,0,0,0,500,497,1,
		0,0,0,501,504,1,0,0,0,502,500,1,0,0,0,502,503,1,0,0,0,503,61,1,0,0,0,504,
		502,1,0,0,0,45,66,68,85,91,106,109,118,123,127,132,154,160,168,172,182,
		186,193,197,206,210,215,227,235,240,248,251,261,264,271,275,284,287,296,
		309,312,323,345,349,357,361,368,381,456,500,502
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
